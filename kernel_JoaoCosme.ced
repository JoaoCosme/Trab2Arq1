
;*****************************************************************************
;
;	Trabalho realizado por João Pedro Cosme
;
;	INF01108 - Arquitetura e Organização de Computadores I - 2020/1 - Turma A 
;
;	Numero do Cartão: 00314792
;
;	Novembro de 2020
;					
;	Repositorio Github: https://github.com/JoaoCosme/Trab2Arq1
;
;****************************************************************************
;****************************************************************************
;
;	Arquivo de Refer�ncia para iniciar o desenvolvimento do kernel
;
;	vers�o: 2020.1
;
;	�reas de mem�ria
;
;	8000 - FF7F		_KRN_INT
;					�rea de Kernel para implementa��o dos alunos
;
;	FF80 - FFBF 	_IOAREA16
;					Area de perifericos, acessada na base 16 bits
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits
;
;******************************************************************************

_APP:		equ	h0100
_KRN_INT:	equ	H8000
_IOAREA16:	equ	hFF80
_IOAREA08:	equ	hFFC0
_STACK:		equ	hFDE8


;
;------------------------------------------------------------------------------
;	�rea reservada para os perif�ricos
;------------------------------------------------------------------------------

; Acesso em 16 bits
	org	_IOAREA16
	daw	[31]
IVET:	dw	0			; Vetor de interrup��o

; Acesso em 8 bits
	org	_IOAREA08
	dab	[23]
TIMDT:	db	0			; Registro de programa��o do timer
INTS:	db	0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db	0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db	0			; Status do teclado
TECDT:	db	0			; Dado do teclado
VISOR:	dab	[36]		; Portas de acesso ao visor

CR:			equ	H0D
BS:			equ	H08




;
;------------------------------------------------------------------------------
;	Area para o kernel
;	Inicializa��o (reset)
;	Fun��es para usa do aplica��o
;------------------------------------------------------------------------------
		org		_KRN_INT

		dw		reset
		dw		kbhit
		dw		shift
		dw		ctrl
		dw		getchar
		dw		putchar
		dw		putmsg
		dw		start
		dw		ready
		dw		keyStat



;------------------------------------------------------------------------------
;	C�digo de RESET (BOOT) do processador/interrup��o
;------------------------------------------------------------------------------
reset:
; 1) Desabilitar o sistema de interrup��es
; 2) Inicializar o stack pointer (SP = R6)
; 3) Inicializar as vari�veis internas usadas pelo sistema de interrup��es (IVET, INTE, etc.)
; 4) Inicializar as vari�veis internas do kernel
; 5) Inicializar o teclado zerando o byte de estado (TECST, endere�o 65498)
; 6) Inicializar o timer
; 7) Limpar o visor
; 8) Habilitar interrup��es
; 9) Retornar para o programa de aplica��o com um desvio para o endere�o H0100 da mem�ria

		MOV		#0,INTE 	;;Interrompe as interrupções para inicialização
		;;Inicialização de Variaveis de Programa
		MOV		#0, visorOffset
		MOV		#0, contador
		MOV		#0, keyStat
		MOV		#0, contadorMeta
		;;Inicialização de variaveis especificas do CESAR
		MOV		#_STACK, R6
		MOV		#_tratador, IVET
		MOV		#h00, TECST
		MOV 		#h10, TIMDT
		;;Limpando Visor
ClearDisplay:
		mov		#VISOR,r0
CD_Loop:
		mov		#' ',(r0)
		inc		r0
		CMP		r0,#0
		bne		CD_Loop
		MOV		h82,INTE
		JMP		h0100

;------------------------------------------------------------------------------
;	BOOL kbhit(VOID)
;
;	Retorna em R0 o estado do teclado. Cada bit de R0 representa uma informa��o:
;	�	Bit 0: indica se h� tecla;
;	�	Bit 1: indica se o estado SHIFT est� ligado;
;	�	Bit 2: indica se o estado CTRL est� ligado.
;	�	Os outros bits devem retornar, sempre, em zero.a
;	Essa fun��o n�o � bloqueante. Ou seja, deve retornar imediatamente para o chamador, com a informa��o do teclado.
;------------------------------------------------------------------------------
kbhit:
;; Verifica se alguma tecla foi pressionada e atualiza o bit0 de keyStat de acordo.

		mov		TECST,r0
		cmp		r0,#h80
		bne		_kbhitNo
		OR		#h01,keyStat ;;Altera apenas o bit 0 de keyStat
		JMP		_kbhitEnd

_kbhitNo:
		AND		#hFE,keyStat ;;Altera apenas o bit 0 de keyStat
_kbhitEnd:
		mov		keyStat,R0
		CLR		TECST
		rts		r7


;------------------------------------------------------------------------------
;	VOID shift(BOOL)
;
;Fun�ao:
;	Liga ou desliga o estado SHIFT, conforme o valor de R0:
;	�     Zero: desliga o estado SHIFT
;	�     Outro valor: liga o estado SHIFT
;------------------------------------------------------------------------------
shift:
;; Verifica R0 e atualiza o bit1 de keyStat de acordo.
		TST		R0
		BEQ		_shiftOff
		OR 		#h02, keyStat
		JMP		_shiftend

_shiftOff:
		AND		#hFD, keyStat

_shiftend:
		MOV		keyStat,R0
		rts		r7



;------------------------------------------------------------------------------
;	VOID ctrl(BOOL)
;
;Fun�ao:
;	Liga ou desliga o estado CTRL, conforme o valor de R0:
;	�     Zero: desliga o estado CTRL
;	�     Outro valor: liga o estado CTRL
;------------------------------------------------------------------------------
ctrl:
;; Verifica R0 e atualiza o bit2 de keyStat de acordo.
		TST		R0
		BEQ		_ctrlOff
		OR 		#h04, keyStat
		JMP		_ctrlEnd

_ctrlOff:
		AND		#hFB, keyStat

_ctrlEnd:
		MOV		keyStat,R0
		rts		r7


;------------------------------------------------------------------------------
;	CHAR getchar(VOID)
;
;Fun�ao:
;	Obt�m o c�digo ASCII de um caractere digitado no teclado e devolve o mesmo no registrador R0.
;	N�o �ecoa� o caractere lido no visor.
;	Diferentemente da �_kbhit�, permanece bloqueada, aguardando que algum caractere seja digitado.
;	Retorna as letras conforme o estado SHIFT e CTRL:
;	�	Se ambos desligados, retorna sempre letras min�sculas (H61 � H7A);
;	�	Se CTRL ligado, converte letras em caracteres de controle correspondentes (valores ASCII entre H00 e H1A)
;	�	Se CTRL desligado e SHIFT ligado, converte letras para as correspondentes letras mai�sculas (valores ASCII entre H41 e H5A)
;------------------------------------------------------------------------------



getchar:
;;Inicia com o loop de bloqueio até que ocorra um hit no teclado
		JSR		r7, kbhit
		MOV		keyStat,r2
		MOV		#h01,R1
		AND		R0,R1	;;Verifica se o bit0 de keystat está ativado, que indica se há tecla
		BEQ		getchar
		MOV		TECDT, R0
		;;Verifica se a tecla pressionada foi um numero decimal
		CMP		R0,#h2F
		BLT		_getcharcontinue
		CMP		R0,#h39
		BLT		_getcharend

_getcharcontinue:

		;;Verifica se o CTRL esta ativado em keyStat, caso esteja, pula para a rotina de tratamento especifica
		MOV		#h04,r1
		AND		 R2,r1, ;Verificar se tem CTRL
		BNE		_getcharCtrlMenor
		;;Verifica se o Shift esta ativado em keyStat, caso esteja, pula para a rotina de tratamento especifica
		MOV		#h02,r1
		AND		 R2,r1,
		BNE		_getcharshiftMenor
		MOV		#02,R3
		;; Caso não tenha pulado para nenhuma outra subrotina, significa que nem CTRL nem SHIFT estão pressionados, ou seja, uma letra minuscula deve ser entregue
_getcharSemStatusMenor:
		CMP		R0,#h61 ;; Verifica o limite inferior das letras minusculas (a=61)
		BGT		_getcharSemStatusMaior
		ADD		#h20, R0 ;;O deslocamento entre as faixas que cada condição (sem status,CTRL,SHIFT) atendem, estão distantes em h20 de seu caracter respectivo em outra faixa
		JMP		_getcharSemStatusMenor
_getcharSemStatusMaior:
		CMP		R0,#H7A
		BLT		_getcharEnd
		SUB		#h20, R0 ;;O deslocamento entre as faixas que cada condição (sem status,CTRL,SHIFT) atendem, estão distantes em h20 de seu caracter respectivo em outra faixa
		JMP 		_getcharSemStatusMaior

		;; Tratamento de CTRL
_getcharCtrlMenor:
		CMP		R0,#h00
		BGT		_getcharCtrlMaior
		ADD		#H20, R0 ;;O deslocamento entre as faixas que cada condição (sem status,CTRL,SHIFT) atendem, estão distantes em h20 de seu caracter respectivo em outra faixa
		JMP		_getcharCtrlMenor
_getcharCtrlMaior:
		CMP		R0,#H1A
		BLT		_getcharEnd
		SUB		#h20, R0 ;;O deslocamento entre as faixas que cada condição (sem status,CTRL,SHIFT) atendem, estão distantes em h20 de seu caracter respectivo em outra faixa
		JMP 		_getcharCtrlMaior
		;; Tratamento de SHIFT
_getcharshiftMenor:
		CMP		R0,#H41
		BGT		_getcharshiftMaior
		ADD		#h20, R0 ;;O deslocamento entre as faixas que cada condição (sem status,CTRL,SHIFT) atendem, estão distantes em h20 de seu caracter respectivo em outra faixa
		JMP		_getcharshiftMenor
_getcharshiftMaior:
		CMP		R0,#H5A
		BLT		_getcharEnd
		SUB		#h20, R0 ;;O deslocamento entre as faixas que cada condição (sem status,CTRL,SHIFT) atendem, estão distantes em h20 de seu caracter respectivo em outra faixa
		JMP 		_getcharshiftMaior
_getcharEnd:
		AND		#hFE,keystat ;;Zera o bit 0 de keyStat para poder receber uma nova tecla no futuro
		rts		r7



;------------------------------------------------------------------------------
;	VOID	putchar(WORD, WORD, CHAR)
;
;Fun�ao:
;	Escreve um caractere no visor. Os par�metros de entrada da fun��o s�o os seguintes:
;	� R0: ASCII do caractere a ser colocado no visor (entre H00 e H7E)
;	� R1: N�mero do visor a ser usado (0 ou 1)
;	� R2: Posi��o no visor selecionado (entre 0 e 17)
;	Se a fun��o for executada corretamente, retornar 0 (zero) em R0.
;	Caso ocorra erro ou se os valores fornecidos na entrada sejam inv�lidos, a fun��o deve ser ignorada e retornado valor diferente de 0 (zero) em R0.
;------------------------------------------------------------------------------
putchar:
;; Verifica se o caractere de entrada está dentro da faixa de representação
		CMP		R0,#h00
		BLT		_putcharErrorChar

		CMP		R0,#H7A
		BGT		_putcharErrorChar
;; Verifica se o visor escolhido está entre 0 e 1
		CMP		R1,#01
		BGT		_putcharErrorVisor
		CMP		R1,#0
		BLT		_putcharErrorVisor

;;Validação de offset de visor, caso o visor escolhido seja o 1, deve-se adicionar 18 para que os caracteres sejam impressos nos visores corretos
		CMP			R1,#0
		BNE			_putcharVisor1
		MOV			#0,visorOffset
		JMP			_putcharPrint
_putcharVisor1:
		MOV			#18,visorOffset
;;Verificar se a posição escolhida para ser impresso esta entre 0 e 17 (range do visor)
_putcharPrint:
		CMP		R2,#h00
		BLT		_putcharErrorForaVisor
		CMP		R2,#17
		BGT		_putcharErrorForaVisor
;; Atualiza o offset do visor de acordo com a posição e visor escolhidos
		ADD		visorOffset,R2
		MOV		R0,VISOR(R2)
;; Verifica qual visor foi utilizado, caso tenha sido o 1, remove-se o offset de visor para que o controle de tamanho continue correto
		CMP		R1,#0
		BEQ		_putcharSemCorre
		SUB		#18,r2
;; Final do Programa
_putcharSemCorre:
		MOV		#0,R0
		JMP		_putcharEnd
;;Tratamentos de Erro
_putcharErrorChar:
		mov 		#h405,R0 ;; Caractere Invalido
		JMP 		_putcharEnd

_putcharErrorVisor:
		mov 		#h404,R0  ;; Visor invalido
		JMP 		_putcharEnd
_putcharErrorForaVisor:
		mov		 #h400,R0 ;; Posição invalida
		JMP		 _putcharEnd

_putcharEnd:
		rts		r7


;------------------------------------------------------------------------------
;	VOID	putmsg(WORD, WORD, CHAR*)
;
;Fun�ao:
;	Escreve uma mensagem no visor. Os par�metros de entrada da fun��o s�o os seguintes:
;	� R0: Endere�o do string a ser colocado no visor. O string deve ser terminado com �\0� (string �C�).
;	� R1: N�mero do visor a ser usado (0 ou 1)
;	� R2: Posi��o no visor selecionado (entre 0 e 17)
;	Se a fun��o for executada corretamente, retornar 0 (zero) em R0.
;	Caso ocorra erro ou se os valores fornecidos na entrada sejam inv�lidos, a fun��o deve ser ignorada e retornado valor diferente de 0 (zero) em R0.
;	Caso o string seja maior do que o tamanho do visor (18 caracteres), o string deve ser truncado.
;------------------------------------------------------------------------------
putmsg:
		MOV		R0,R3 ;;Obtem posição da string
		DEC		R3
_putmsgLoop:
		CMP		(R3), #hFF ;; Verifica se é '\0'
		BEQ		_putmsgStringFim
		;; Transfere o proximo caractere da string para R0, limpa o bit mais significativo e chana putchar
		MOV		(R3),R0
		AND		#hff,R0
		JSR		r7, putchar
		CMP		R0,#0
		;;Verifica se houve erro na impressão
		BNE		_putmsgTratamento
		;;Atualiza variavies de controle
		INC		R3
		INC		R2
		JMP		_putmsgLoop
_putmsgTratamento:
		;;Caso o erro tenha ocorrido por causa de string muito grande, corrige pois é esperado o truncamento
		CMP		#h400,R0
		BNE		_putmsgFim
_putmsgStringFim:
		mov		#0,R0
_putmsgFim:
		rts		r7


;------------------------------------------------------------------------------
;	VOID start (WORD)
;
;Fun�ao:
;	Inicializa uma temporiza��o
;	Se for chamada, novamente, antes do tempo atingir o seu final, um novo tempo ser� programado.
;	Essa fun��o deve ser usada em conjunto com a fun��o _ready
;	Esse timer deve ter uma resolu��o de 10ms
;Entra:
;	R0 = valor do tempo, em milisegundos
;------------------------------------------------------------------------------
start:

		;; Inicializa o timer e habilita interrupções por timer
		MOV		#1,TIMDT
		OR		#h81,INTE
		MOV		#0,contador
		MOV		R0,contadorMeta
		AND		#hFE,INTS
		rts		r7


;------------------------------------------------------------------------------
;	bool ready(void)
;
;Fun�ao:
;	Informa se o tempo programado pela fun��o _start esgotou-se.
;Retorna:
;	R0==0, se o tempo programado n�o se esgotou.
;	R0<>0, se o tempo programado estogou-se
;------------------------------------------------------------------------------
ready:
		;;Verifica se o tempo programado se transcorreu
		CMP		contador,contadorMeta
		BLT		_notready
		MOV		#1,R0
		JMP		_readyend
_notready:
		MOV		#0,R0
_readyend:
		rts		r7


_tratador:
		;;Tratador de interrupção, verifica se foi o timer que a causou, caso tenha sido, incrementa em um o contador e finaliza
		MOV		INTS,R4
		AND		#h81,R4
		BEQ		_tratadorFim
		INC		contador
		MOV		#h00,INTS
_tratadorFim:
		RTI


;;Variavies de programa

keyStat:	dw		0
visorOffset:	dw		0
contador:	dw		0
contadorMeta:	dw		0


